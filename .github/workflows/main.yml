name: Capture Screenshots with Chrome

on:
  push:
    branches:
      - main

jobs:
  capture-screenshots:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Create custom Docker network
        run: docker network create --subnet=172.18.0.0/16 squid-network

      - name: Pull Squid image
        run: docker pull sameersbn/squid

      - name: Run Squid containers
        run: |
          for i in {1..5}; do
            docker run -d --name squid-$i --net squid-network --ip 172.18.0.$((i+1)) sameersbn/squid
          done

      - name: Install Chromedriver in Docker containers
        if: ${{ success() }}  # Only execute if all containers are running
        run: |
          for i in {1..5}; do
            docker exec squid-$i sh -c 'apt-get update && apt-get install -y wget unzip python3 python3-pip'
            docker exec squid-$i sh -c 'wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -'
            docker exec squid-$i sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee -a /etc/apt/sources.list.d/google-chrome.list'
            docker exec squid-$i apt-get update
            docker exec squid-$i apt-get install -y google-chrome-stable
            docker exec squid-$i wget -q "https://storage.googleapis.com/chrome-for-testing-public/126.0.6478.126/linux64/chromedriver-linux64.zip" -O /tmp/chromedriver-linux64.zip
            docker exec squid-$i unzip -o /tmp/chromedriver-linux64.zip -d /tmp
            docker exec squid-$i mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/
            docker exec squid-$i chmod +x /usr/local/bin/chromedriver
            docker exec squid-$i rm -rf /tmp/chromedriver-linux64 /tmp/chromedriver.zip
            docker exec squid-$i pip3 install selenium
          done

      - name: Create directory and copy Python script and Squid config into containers
        if: ${{ success() }}  # Only execute if all containers are running
        run: |
          for i in {1..5}; do
            RUNNING=$(docker inspect -f '{{.State.Running}}' squid-$i)
            if [ "$RUNNING" = "true" ]; then
              docker exec squid-$i mkdir -p /home/ubuntu/screenshots
              docker cp .github/workflows/capture_screenshot.py squid-$i:/home/ubuntu/capture_screenshot.py
              docker cp squid.conf squid-$i:/etc/squid/squid.conf
            else
              echo "Container squid-$i is not running, skipping."
            fi
          done

      - name: Restart Squid containers
        run: |
          for i in {1..5}; do
            RUNNING=$(docker inspect -f '{{.State.Running}}' squid-$i)
            if [ "$RUNNING" = "true" ]; then
              docker restart squid-$i
            else
              echo "Container squid-$i is not running, skipping."
            fi
          done

      - name: Run Python script to capture screenshots with Chrome
        if: ${{ success() }}  # Only execute if all containers are running
        run: |
          for i in {1..5}; do
            RUNNING=$(docker inspect -f '{{.State.Running}}' squid-$i)
            if [ "$RUNNING" = "true" ]; then
              docker exec squid-$i python3 /home/ubuntu/capture_screenshot.py $i
            else
              echo "Container squid-$i is not running, skipping."
            fi
          done

      - name: Copy screenshots from Docker containers
        run: |
          mkdir -p artifacts/screenshots

          for i in {1..5}; do
            RUNNING=$(docker inspect -f '{{.State.Running}}' squid-$i)
            if [ "$RUNNING" = "true" ]; then
              docker cp squid-$i:/home/ubuntu/screenshots screenshots/squid-$i
            else
              echo "Container squid-$i is not running, skipping."
            fi
          done

      - name: Archive screenshots as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: artifacts/screenshots
