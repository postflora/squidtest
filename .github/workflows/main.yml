name: Capture Screenshots with Firefox

on:
  push:
    branches:
      - main

jobs:
  capture-screenshots:
    runs-on: ubuntu-latest

    steps:
      - name: Create custom Docker network
        run: docker network create --subnet=172.18.0.0/16 squid-network

      - name: Run Squid containers with specific IPs and NAT rules
        run: |
          # Loop through containers
          for i in {1..5}; do
            ip_address="172.18.0.$((10 + i))"
            external_port=$((3130 + i))
            internal_port=$((3129 + i))

            # Generate a random external IP address in the range 1xx.xxx.xxx.100 to 1xx.xxx.xxx.104
            random_ip=$((100 + RANDOM % 5))
            external_ip="1xx.xxx.xxx.$random_ip"

            # Start container with specific IP and port mappings
            docker run -d --name squid-$i --net squid-network --ip $ip_address -p $external_port:$internal_port sameersbn/squid
            
            # Apply NAT rules using iptables (alternative method)
            iptables -t nat -A POSTROUTING -s $ip_address ! -o bridge-coi -j SNAT --to-source $external_ip
          done

      - name: Display Docker container ports
        run: docker ps --format "table {{.Names}}\t{{.Ports}}" | grep -E 'squid-[1-5]' || true

      - name: Generate and Copy custom squid.conf into containers
        run: |
          for i in {1..5}; do
            internal_port=$((3129 + i))
            external_port=$((3130 + i))
            echo "acl all src all" > squid-$i.conf
            echo "http_access allow all" >> squid-$i.conf
            echo "http_port $external_port" >> squid-$i.conf  # Set external http_port to incremental ports for each container
            echo "http_port $internal_port" >> squid-$i.conf  # Set internal http_port to incremental ports for each container
            echo "visible_hostname squid-$i" >> squid-$i.conf  # Set the visible hostname for Squid
            docker cp squid-$i.conf squid-$i:/etc/squid/squid.conf
            rm squid-$i.conf
            docker restart squid-$i
          done

      - name: Verify Proxy Functionality
        if: ${{ success() }}  # Only execute if previous steps were successful
        run: |
          for i in {1..5}; do
            RUNNING=$(docker inspect -f '{{.State.Running}}' squid-$i)
            if [ "$RUNNING" = "true" ]; then
              external_port=$((3130 + i))
              docker exec squid-$i apt-get update
              docker exec squid-$i apt-get install -y curl
              echo "Testing proxy for squid-$i with external port $external_port"
              docker exec squid-$i curl --proxy http://172.18.0.$((10 + i)):${external_port} https://ifconfig.me/ip
            else
              echo "Container squid-$i is not running, skipping."
            fi
          done

      - name: Install Python 3 and dependencies in Docker containers
        if: ${{ success() }}  # Only execute if all containers are running
        run: |
          for i in {1..5}; do
            docker exec squid-$i cat /etc/squid/squid.conf
            docker exec squid-$i apt-get update
            docker exec squid-$i apt-get install -y python3 python3-pip firefox wget tar
            docker exec squid-$i pip3 install selenium
            docker exec squid-$i wget https://github.com/mozilla/geckodriver/releases/download/v0.31.0/geckodriver-v0.31.0-linux64.tar.gz
            docker exec squid-$i tar -xvzf geckodriver-v0.31.0-linux64.tar.gz -C /usr/local/bin/
            docker exec squid-$i rm geckodriver-v0.31.0-linux64.tar.gz

            # Create screenshots directory inside Docker container
            docker exec squid-$i mkdir -p /home/ubuntu/screenshots
          done

      - name: Copy Python script into containers
        if: ${{ success() }}  # Only execute if all containers are running
        run: |
          for i in {1..5}; do
            RUNNING=$(docker inspect -f '{{.State.Running}}' squid-$i)
            if [ "$RUNNING" = "true" ]; then
              docker cp .github/workflows/capture_screenshot.py squid-$i:/home/ubuntu/capture_screenshot.py
            else
              echo "Container squid-$i is not running, skipping."
            fi
          done

      - name: Run Python script to capture screenshots with Firefox
        if: ${{ success() }}  # Only execute if all containers are running
        run: |
          for i in {1..5}; do
            RUNNING=$(docker inspect -f '{{.State.Running}}' squid-$i)
            if [ "$RUNNING" = "true" ]; then
              external_port=$((3130 + i))
              internal_port=$((3129 + i))
              echo "Running capture_screenshot.py in squid-$i with external port $external_port and internal port $internal_port"
              docker exec squid-$i python3 /home/ubuntu/capture_screenshot.py $i $external_port
            else
              echo "Container squid-$i is not running, skipping."
            fi
          done

      - name: Copy screenshots from Docker containers
        if: ${{ success() }}  # Only execute if script ran successfully
        run: |
          mkdir -p screenshots

          for i in {1..5}; do
            RUNNING=$(docker inspect -f '{{.State.Running}}' squid-$i)
            if [ "$RUNNING" = "true" ]; then
              docker cp squid-$i:/home/ubuntu/screenshots screenshots/squid-$i
            else
              echo "Container squid-$i is not running, skipping."
            fi
          done

      - name: Archive screenshots as artifacts
        if: ${{ success() }}  # Only archive screenshots if copied successfully
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: screenshots
